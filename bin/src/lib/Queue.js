// Generated by CoffeeScript 1.10.0
(function() {
  var Channel, Queue, _, classes, debug, defaults, methodTable, methods, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('./config').debug('amqp:Queue');

  Channel = require('./Channel');

  defaults = require('./defaults');

  ref = require('./config').protocol, methodTable = ref.methodTable, classes = ref.classes, methods = ref.methods;

  _ = require('underscore');

  Queue = (function() {

    /*
      @args.name(required)
      @cb function required
     */
    function Queue(channel, args, cb) {
      this["delete"] = bind(this["delete"], this);
      this.messageCount = bind(this.messageCount, this);
      this.unbind = bind(this.unbind, this);
      this.bind = bind(this.bind, this);
      debug(3, function() {
        return ["New queue", JSON.stringify(args)];
      });
      if ((args.queue == null) && (args.name != null)) {
        args.queue = args.name;
        delete args['name'];
      }
      if (args.queue == null) {
        if (cb != null) {
          cb("args.queue is required");
        }
        return;
      }
      this.queueOptions = _.defaults(args, defaults.queue);
      this.channel = channel;
      this.taskPush = channel.taskPush;
      if (cb != null) {
        cb(null, this);
      }
    }

    Queue.prototype.declare = function(args, cb) {
      var declareOptions, queueNameSpecified;
      if (args == null) {
        args = {};
      }
      queueNameSpecified = (args.queue != null) && args.queue !== "";
      if (typeof args === 'function') {
        cb = args;
        args = {};
        declareOptions = this.queueOptions;
      } else {
        declareOptions = _.defaults(args, this.queueOptions);
      }
      this.taskPush(methods.queueDeclare, declareOptions, methods.queueDeclareOk, (function(_this) {
        return function(err, res) {
          if (!queueNameSpecified && (err == null) && (res.queue != null)) {
            _this.queueOptions.queue = res.queue;
          }
          return typeof cb === "function" ? cb(err, res) : void 0;
        };
      })(this));
      if (cb == null) {
        return this;
      }
    };

    Queue.prototype.bind = function(exchange, routingKey, queueName, cb) {
      var queueBindOptions;
      if (typeof queueName === 'string') {
        queueName = queueName;
      } else {
        cb = queueName;
        queueName = this.queueOptions.queue;
      }
      queueBindOptions = {
        queue: queueName,
        exchange: exchange,
        routingKey: routingKey,
        "arguments": {}
      };
      this.taskPush(methods.queueBind, queueBindOptions, methods.queueBindOk, cb);
      if (cb == null) {
        return this;
      }
    };

    Queue.prototype.unbind = function(exchange, routingKey, queueName, cb) {
      var queueUnbindOptions;
      if (typeof queueName === 'string') {
        queueName = queueName;
      } else {
        cb = queueName;
        queueName = this.queueOptions.queue;
      }
      queueUnbindOptions = {
        queue: queueName,
        exchange: exchange,
        routingKey: routingKey,
        "arguments": {}
      };
      this.taskPush(methods.queueUnbind, queueUnbindOptions, methods.queueUnbindOk, cb);
      if (cb == null) {
        return this;
      }
    };

    Queue.prototype.messageCount = function(args, cb) {
      var declareOptions;
      if (args == null) {
        args = {};
      }
      if (typeof args === 'function') {
        cb = args;
        args = {};
      }
      declareOptions = _.defaults(args, this.queueOptions);
      return this.declare(declareOptions, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if ((res != null ? res.messageCount : void 0) != null) {
          return cb(null, res.messageCount);
        } else {
          return cb('messageCount not returned');
        }
      });
    };

    Queue.prototype.consumerCount = function(args, cb) {
      var declareOptions;
      if (args == null) {
        args = {};
      }
      if (typeof args === 'function') {
        cb = args;
        args = {};
      }
      declareOptions = _.defaults(args, this.queueOptions);
      return this.declare(declareOptions, function(err, res) {
        if (err != null) {
          return cb(err);
        }
        if ((res != null ? res.consumerCount : void 0) != null) {
          return cb(null, res.consumerCount);
        } else {
          return cb('consumerCount not returned');
        }
      });
    };

    Queue.prototype["delete"] = function(args, cb) {
      var queueDeleteArgs;
      if (args == null) {
        args = {};
      }
      if (typeof args === 'function') {
        cb = args;
        args = {};
      }
      queueDeleteArgs = _.defaults(args, defaults.queueDelete, {
        queue: this.queueOptions.queue
      });
      this.taskPush(methods.queueDelete, queueDeleteArgs, methods.queueDeleteOk, cb);
      if (cb == null) {
        return this;
      }
    };

    return Queue;

  })();

  module.exports = Queue;

}).call(this);
