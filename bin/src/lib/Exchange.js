// Generated by CoffeeScript 1.10.0
(function() {
  var Exchange, _, debug, defaults, methods,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('./config').debug('amqp:Exchange');

  methods = require('./config').protocol.methods;

  defaults = require('./defaults');

  _ = require('underscore');

  Exchange = (function() {
    function Exchange(channel, args, cb) {
      this["delete"] = bind(this["delete"], this);
      if ((args.exchange == null) && (args.name != null)) {
        args.exchange = args.name;
        delete args['name'];
      }
      if (args.exchange == null) {
        if (cb != null) {
          cb("args.exchange is requried");
        }
        return;
      }
      this.exchangeOptions = _.defaults(args, defaults.exchange);
      this.channel = channel;
      this.taskPush = channel.taskPush;
      if (cb != null) {
        cb(null, this);
      }
    }

    Exchange.prototype.declare = function(args, cb) {
      var declareOptions;
      if (typeof args === 'function') {
        cb = args;
        args = {};
        declareOptions = this.exchangeOptions;
      } else {
        declareOptions = _.defaults(args, this.exchangeOptions);
      }
      return this.taskPush(methods.exchangeDeclare, declareOptions, methods.exchangeDeclareOk, cb);
    };

    Exchange.prototype["delete"] = function(args, cb) {
      var exchangeDeleteOptions;
      if (typeof args === 'function') {
        cb = args;
        args = {};
      }
      exchangeDeleteOptions = _.defaults(args, defaults.exchangeDelete, {
        exchange: this.exchangeOptions.exchange
      });
      return this.taskPush(methods.exchangeDelete, exchangeDeleteOptions, methods.exchangeDeleteOk, cb);
    };

    return Exchange;

  })();

  module.exports = Exchange;

}).call(this);
